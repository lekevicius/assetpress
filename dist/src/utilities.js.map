{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../../src/utilities.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path'\nimport * as fs from 'fs-extra'\n\n//import * as walk from 'walkdir'\n\nexport function resolvePath (passedFrom: string = '', passedString: boolean = false) {\n  var from, ref, ref1, string, tilded;\n\n  if (passedString) {\n    ref = [passedFrom, passedString], from = ref[0], string = ref[1];\n  } else {\n    ref1 = [false, passedFrom], from = ref1[0], string = ref1[1];\n  }\n  tilded = string.substring(0, 1) === '~' ? process.env.HOME + string.substring(1) : string;\n  if (from) {\n    return path.resolve(from, tilded);\n  } else {\n    return path.resolve(tilded);\n  }\n};\n\nexport function escapeShell(cmd: string) {\n  return cmd.replace(/([\"\\s'$`\\\\])/g, '\\\\$1');\n};\n\nexport function addTrailingSlash(str: string) {\n  if (str.slice(-1) !== '/') {\n    return str + '/';\n  } else {\n    return str;\n  }\n};\n\nexport function removeTrailingSlash(str: string) {\n  return str.replace(/\\/$/, \"\");\n};\n\nexport function cleanMove(from: string, to: string) {\n  if (fs.existsSync(to)) {\n    fs.removeSync(to);\n  }\n  fs.mkdirpSync(path.resolve(to, '..'));\n  return fs.renameSync(from, to);\n};\n\nexport function dirtyMove (from: string, to: string) {\n  var directoryPath, filepath, fromPath, i, len, paths, results, toPath, toPathDir;\n  paths = walk.sync(from);\n  results = [];\n  for (i = 0, len = paths.length; i < len; i++) {\n    directoryPath = paths[i];\n    filepath = path.relative(from, directoryPath);\n    fromPath = path.resolve(from, filepath);\n    if (!fs.lstatSync(fromPath).isFile()) {\n      continue;\n    }\n    toPath = path.resolve(to, filepath);\n    toPathDir = path.parse(toPath).dir;\n    fs.mkdirpSync(toPathDir);\n    results.push(fs.renameSync(fromPath, toPath));\n  }\n  return results;\n};\n\nexport function move (from: string, to: string, clean: boolean) {\n  let moveFunction = clean ? cleanMove : dirtyMove;\n  return moveFunction(from, to);\n};\n"]}